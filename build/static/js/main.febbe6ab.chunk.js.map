{"version":3,"sources":["Board.tsx","Settings.tsx","processInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Board","this","props","gameState","id","map","e","i","key","className","onClick","update","pSymbol","cSymbol","React","Component","Settings","oppositeDifficulty","difficulty","updateSettings","winningCells","findPairs","cells","foundPairs","forEach","winningSet","count","cell","includes","push","winCheck","foundWins","processInput","state","newState","pCells","cCells","boardMap","length","possibleMoves","allPairs","concat","bestMoves","reverse","cCell","firstPlayer","Math","ceil","random","App","updateBoard","input","setState","changeSetting","setting","newSettings","fill","Array","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.febbe6ab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppState } from \"./App\";\r\nexport interface BoardProps extends AppState {\r\n    update:Function;\r\n}\r\n\r\nexport interface BoardState {\r\n    \"null\":String\r\n}\r\n \r\nclass Board extends React.Component<BoardProps, BoardState> {\r\n    render() { \r\n        return (\r\n            <div>\r\n                <h2>Game status: {this.props.gameState}</h2>\r\n                <div id=\"gameBoard\">\r\n                {this.props[\"boardMap\"].map((e,i)=>{\r\n                    //TODO: update className based on contents of cell and gameStatus\r\n                    return(<div key={`cell${i}`} className=\"gameCell\" onClick={()=>this.props.update(i)}>\r\n                        {(e!==\"e\")?(e===\"p\")?this.props.pSymbol:this.props.cSymbol:\"\"}\r\n                    </div>)\r\n                })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Board;","import React from 'react';\r\nimport { AppState } from \"./App\";\r\n\r\nexport interface SettingsProps extends AppState {\r\n    updateSettings:Function;\r\n}\r\n \r\nexport interface SettingsState {\r\n    \r\n}\r\n \r\nclass Settings extends React.Component<SettingsProps, SettingsState> {\r\n    render() { \r\n        const oppositeDifficulty = (this.props.difficulty===\"easy\") ? \"hard\" : \"easy\";\r\n        return (\r\n            <div>\r\n                <h2>options:</h2>\r\n                <button onClick={()=>this.props.updateSettings(\"newGame\")}>new game</button>\r\n                <button onClick={()=>this.props.updateSettings(\"difficulty\")}>set difficulty to {oppositeDifficulty}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Settings;","import { AppState } from \"./App\";\r\n\r\nconst winningCells:number[][] = [[0,1,2],[3,4,5],[6,7,8],[0,4,8],[2,4,6],[0,3,6],[1,4,7],[2,5,8]];\r\n\r\nconst findPairs = (cells:number[]):number[][] => {\r\n    let foundPairs:number[][] = [];\r\n    winningCells.forEach(winningSet=>{\r\n        let count:number = 0;\r\n        cells.forEach((cell:number)=>{\r\n            if (winningSet.includes(cell)) { count++; }\r\n            if (count === 2) { foundPairs.push(winningSet)}\r\n        })\r\n    })\r\n    return foundPairs;\r\n}\r\n\r\nconst winCheck = (cells:number[]):number[][] => {\r\n    let foundWins:number[][] = [];\r\n    winningCells.forEach((e:number[])=>{\r\n        if (cells.includes(e[0]) && cells.includes(e[1]) && cells.includes(e[2])) { \r\n            foundWins.push(e);\r\n        }\r\n    })\r\n    return foundWins;\r\n}\r\n\r\nconst processInput = (cell:number,state:AppState):AppState => {\r\n    let newState:AppState = state;\r\n    let pCells:number[] = [];\r\n    let cCells:number[] = [];\r\n    newState.boardMap.forEach((e:String,i:number)=>{\r\n        if (e===\"p\") { pCells.push(i); } \r\n        if (e===\"c\") { cCells.push(i); }\r\n    })\r\n    if (pCells.includes(cell) || cCells.includes(cell) || newState.gameState !== \"your turn\") {\r\n        return newState;\r\n    }\r\n    else {\r\n        pCells.push(cell);\r\n        newState.boardMap[cell] = \"p\";\r\n    }\r\n    const pWin:number[][] = winCheck(pCells)\r\n    if (pWin.length > 0) { \r\n        newState.gameState = \"you win!\";\r\n        return newState;\r\n    }\r\n    let possibleMoves:number[] = [];\r\n    let allPairs:number[][] = findPairs(cCells).concat(findPairs(pCells));\r\n    if (allPairs.length > 0) {\r\n        allPairs.forEach(e=>{\r\n            e.forEach(i=>{\r\n                if (!cCells.includes(i) && !pCells.includes(i)) { possibleMoves.push(i);}\r\n            })\r\n        })\r\n    }\r\n    let bestMoves = [4,0,2,6,8,1,3,5,7];\r\n    if (newState.difficulty === \"easy\") {\r\n        bestMoves = bestMoves.reverse();\r\n    }\r\n    let cCell:number = -1;\r\n    if (pCells.length === 0 \r\n        && cCells.length === 0 \r\n        && newState.firstPlayer === \"c\") {\r\n            cCell = (newState.difficulty === \"easy\") ?\r\n            bestMoves[Math.ceil(Math.random()*(bestMoves.length-1))] :\r\n            bestMoves[0];\r\n    }\r\n    else {\r\n        bestMoves.forEach((e:number)=>{\r\n            if (!cCells.includes(e) && !pCells.includes(e)) {\r\n                possibleMoves.push(e);\r\n            }\r\n        });\r\n        if (possibleMoves[0]>-1) {\r\n            cCell = possibleMoves[0];\r\n        }\r\n    }\r\n    if (cCell !== -1) {\r\n        cCells.push(cCell);\r\n        newState.boardMap[cCell] = \"c\";\r\n    }\r\n    if (winCheck(cCells).length>0) {\r\n        newState.gameState = \"you lost!\";\r\n    }\r\n    if (cCells.length + pCells.length === 9) {\r\n        newState.gameState = \"nobody won\";\r\n    }\r\n    return newState;\r\n};\r\nexport default processInput;","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Board';\r\nimport Settings from './Settings';\r\nimport processInput from './processInput';\r\n\r\nexport interface AppProps {\r\n  \r\n}\r\n\r\nexport interface AppState {\r\n    \"gameState\":String;\r\n    \"firstPlayer\":String;\r\n    \"difficulty\":String;\r\n    \"pSymbol\":String;\r\n    \"cSymbol\":String;\r\n    \"boardMap\":String[];\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n    this.state = { \r\n      \"gameState\":\"your turn\",\r\n      \"firstPlayer\":\"p\",\r\n      \"difficulty\":\"hard\",\r\n      \"pSymbol\":\"ðŸ™‚\",\r\n      \"cSymbol\":\"ðŸ¤–\",\r\n      \"boardMap\":new Array(9).fill(\"e\"),\r\n    };\r\n  }\r\n  updateBoard = (input:number)=> {\r\n    const newState = processInput(input,this.state);\r\n    this.setState(newState)\r\n  }\r\n  changeSetting = (setting:String) => {\r\n    let newSettings:AppState = this.state;\r\n    if (setting===\"newGame\") {\r\n        newSettings.boardMap.fill(\"e\");\r\n        newSettings.gameState=\"your turn\";\r\n    }\r\n    if (setting===\"difficulty\") {\r\n        newSettings.difficulty = (newSettings.difficulty===\"easy\") ? \"hard\" : \"easy\";\r\n    }\r\n    this.setState(newSettings);\r\n}\r\n  render() { \r\n    return (\r\n      <div className=\"App\">\r\n        <h1>T3 - ReactJS (--typescript)</h1>\r\n        <Board {...this.state} update={this.updateBoard}/>\r\n        <Settings {...this.state} updateSettings={this.changeSetting}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default App;\r\n\r\n/*\r\ncomponents:\r\nApp\r\n  Board\r\n    needs: boardState (array of STRINGS (\"x\",\"o\") (emoji??) for each cell on board)\r\n    needs: input function from App.tsx to process player input\r\n  Settings\r\n    needs: AppState for settings values\r\n    needs: changeSettings function from App.tsx to change settings\r\n\r\n    winningCells:[[1,2,3],[4,5,6],[7,8,9],[1,5,9],[3,5,7],[1,4,7],[2,5,8],[3,6,9]],\r\n\r\n*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}